#!/usr/bin/python3

# dilbert.channel.xml.py - Script to convert dilbert webpage to a NarrowCast rss feed (with only one item)
# 2020 sep 23  v3  Maarten Pennings  Added debug structure
# 2019 may 21  v2  Maarten Pennings  Converted to Python3
# 2019 apr 15  v1  Maarten Pennings  Created (copied from xkcd.channel.xml.py)
version = "v3"


# To merge Python into Apache on Ubuntu:
#   sudo apt install apache2 libapache2-mod-wsgi-py3  # for python3

# Create a python scipt (e.g. dilbert.channel.xml.py) and assign rights
#   sudo chown maarten:www-data dilbert.channel.xml.py
#   sudo chmod 755 dilbert.channel.xml.py

# Map python script 'dilbert.channel.xml.py' to url 'rss/dilbert.channel.xml'
#   Edit configuration file    
#     sudo vi /etc/apache2/sites-available/000-default.conf
#   and add the line in the section <VirtualHost *:80>
#     WSGIScriptAlias /rss/dilbert.channel.xml /var/www/html/rss/dilbert.channel.xml.py

# Then, enable mod-wsgi configuration and restart Apache service with the following command:
#   sudo a2enconf wsgi
#   sudo systemctl restart apache2

# To check errors in script look at the log
#   less /var/log/apache2/error.log


import sys
import ntpath
import requests
from xml.dom import minidom


# Parse the dilbert web page and return a tuple (title, desc, imgurl) for the cartoon.
# Returns None on parsing error.
def parse(page):
    title='Dilbert'
    # find the line with the image tag
    pos1= page.find('"img-responsive img-comic"')
    if pos1<0: return None
    pos2= page.find('>',pos1)
    if pos2<0: return None
    line= page[pos1:pos2]
    # Cut out the 'alt' -> 'desc'
    pos1= line.find('alt="')
    if pos1<0: return None
    pos2= line.find(' - Dilbert by Scott Adams"',pos1)
    if pos2<0: return None
    desc= line[pos1+5:pos2]
    # Cut out the 'src' -> 'imgurl'
    pos1= line.find('src="')
    if pos1<0: return None
    pos2= line.find('"',pos1+5)
    if pos2<0: return None
    imgurl= line[pos1+5:pos2]
    if not imgurl.startswith('https:'): imgurl= 'https:'+imgurl
    return (title, desc, imgurl)



# Converts a triple (title, desc, imgurl) to an rss (xml) string
def triple2rss(triple):
    return '<?xml version="1.0" encoding="utf-8"?>\r\n'\
           '<rss>\r\n'\
           '  <channel>\r\n'\
           '    <title>Dilbert</title>\r\n'\
           '    <editor>Generated by '+ntpath.basename(__file__)+' '+version+'</editor>\r\n'\
           '    <item>\r\n'\
           f'      <title>{triple[0]}</title>\r\n'\
           f'      <description>{triple[1]}</description>\r\n'\
           f'      <enclosure url="{triple[2]}"/>\r\n'\
           '    </item>\r\n'\
           '  </channel>\r\n'\
           '</rss>\r\n'


# The entry point of the webserver
def application(environ, start_response):
    log= 'SYNTAX : dilbert.channel.xml\r\n\r\n'
    try:
        # set url
        url= 'https://dilbert.com'
        log+= f'url    : {url}\r\n'
        # load web page
        resp= requests.get(url)
        log+=  'page   : {0}\r\n       : ...\r\n'.format(resp.text[0:500].replace("\n","\n       : "))
        # extract the triple (title, desc, imgurl) for the cartoon.
        triple= parse(resp.text)
        if triple==None: triple=('Dilbert','Parse error','https://assets.amuniversal.com/583d3560af230132cfe8005056a9545d')
        log+= f'title  : "{triple[0]}"\r\n' 
        log+= f'desc   : "{triple[1]}"\r\n' 
        log+= f'imgurl : "{triple[2]}"\r\n' 
        # create rss feed 
        rss= triple2rss(triple)
        log+=  'rss    : {0}\r\n'.format(rss.replace("\n","\n       : "))
        # raise Exception('Aborted for testing') # Uncomment for testing
        start_response( '200 OK' , [('Content-type','text/xml')] )
        return [rss.encode()]
    except Exception as error:
        log+= 'ERROR  : %s\r\n' % str(error)
        start_response('404 ERROR',[('Content-type','text/plain')])
        return [ log.encode('utf-8') ]
       

# The entry point for commandline test
if __name__ == "__main__":
    url= 'https://dilbert.com'
    resp= requests.get(url)
    triple= parse(resp.text)
    rss= triple2rss(triple)
    print(rss)
 


