#!/usr/bin/python3

# intra.channel.xml.py - Script to convert intranet sharepoint rss feed to a NarrowCast rss feed
# 2019 may 06  v2  Maarten Pennings  Moved cfg.py
# 2019 may 03  v1  Maarten Pennings  Created 
version = "v2"


# To merge Python into Apache on Ubuntu:
#   sudo apt install apache2 libapache2-mod-wsgi-py3  # for python3

# Create a python scipt (e.g. intra.channel.xml.py) and assign rights
#   sudo chown maarten:www-data intra.channel.xml.py
#   sudo chmod 755 intra.channel.xml.py

# Map python script 'intra.channel.xml.py' to url 'rss/intra.channel.xml'
#   Edit configuration file    
#     sudo vi /etc/apache2/sites-available/000-default.conf
#   and add the line in the section <VirtualHost *:80>
#     WSGIScriptAlias /rss/intra.channel.xml /var/www/html/rss/intra.channel.xml.py

# Then, enable mod-wsgi configuration and restart Apache service with the following command:
#   sudo a2enconf wsgi
#   sudo systemctl restart apache2

# To check errors in script look at the log
#   less /var/log/apache2/error.log


import sys
import requests
import requests_ntlm
import xml.dom.minidom

#sys.setdefaultencoding('utf-8')

# Import cfg.username, cfg.password, cfg.hostname, cfg.hostip
import sys; sys.path.append( "/var/www" ); import cfg


# As input needs a list of string triples (title,description,imgurl)
# Returns an rss (xml) string [format narrowcast] with all triples.
def triples2xml(triples):
  prefix= "sp?"
  items= ""
  for triple in triples:
    items+='    <item>\r\n'\
           '      <enclosure url="{3}{2}"/>\r\n'\
           '      <title>{0}</title>\r\n'\
           '      <description>{1}</description>\r\n'\
           '    </item>\r\n'\
           '\r\n'.format(triple[0],triple[1],triple[2],prefix)
  # Surround items with rss/channel tags
  return   '<?xml version="1.0" encoding="utf-8"?>\r\n'\
           '<rss>\r\n'\
           '  <channel>\r\n'\
           '    <title>Intranet</title>\r\n'\
           '    <editor>Generated by '+__file__+' '+version+'</editor>\r\n'\
           '    <urlnonce>no</urlnonce>\r\n'\
           '\r\n'\
           +items+\
           '  </channel>\r\n'\
           '</rss>\r\n'


# As input takes a dom tree like '<b>Description:</b> bla bla'
# Returns the text in <b>...</b> or ""
def bdata(node):
    if node==None: return ""
    child1= node.firstChild
    if child1==None: return ""
    child2= child1.firstChild
    if child2==None: return ""
    data= child2.data
    if data==None: return ""
    return data.strip()


# As input takes a dom tree like '<b>Description:</b> bla bla'
# Returns the text after </b>... or ""
def tdata(node):
    if node==None: return ""
    child= node.lastChild
    if child==None: return ""
    data= child.data
    if data==None: return ""
    return data.strip()


# As input takes a string
# Returns that same string, cleaned of redundant spaces/nl/lf, and xml chars escaped (& -> &amp;)
def s2xml(s):
  t=xml.dom.minidom.Text()
  t.data= s.strip().replace('\n',' ').replace('\r',' ').replace('  ',' ').replace('  ',' ').replace('  ',' ')
  return t.toxml()

  
# As input takes a string
# Returns that same string but spaced replaced by %20
def s2url(s):
  return s.strip().replace(' ','%20')
  
  
# As input takes an rss (xml) string [format sharepoint] and returns a list of string triples (title,description,imgurl)
def xml2triples(rssdata):
  triples= []
  rssxml= xml.dom.minidom.parseString(rssdata)
  ## Check rss, channel
  #rss_in= rssxml.getElementsByTagName('rss')
  #if len(rss_in)!=1: return [('Parse error','xml file does not have <rss> as root','error')]
  #channel_in= rss_in[0].getElementsByTagName('channel')
  #if len(channel_in)!=1: return [('Parse error','xml file does not have <channel> in <rss>','error')]
  ## Check all items
  #items_in= channel_in[0].getElementsByTagName('item')
  items_in= rssxml.getElementsByTagName('item')
  if len(items_in)<1: return [('Parse error','xml file does not have <item>s in <channel> in <rss>','error')]
  ix = 0
  for item_in in items_in:
    # Get image URL
    itemenclosure_in= item_in.getElementsByTagName('enclosure')
    if len(itemenclosure_in)!=1: return [('Parse error','xml file: <item> '+str(ix)+' should have 1 enclosure','error')]
    imgurl_out= itemenclosure_in[0].getAttribute('url')
    # Get Description
    itemdescription_in= item_in.getElementsByTagName('description')
    if len(itemdescription_in)!=1: return [('Parse error','xml file: <item> '+str(ix)+' should have 1 description','error')]
    description= '<description>'+itemdescription_in[0].firstChild.data+'</description>'
    # Parse description
    # <description> <div><b>Description:</b> bla bla</div> <div><b>Title:</b> bla bla </div> </description>
    descriptionxml= xml.dom.minidom.parseString(description)
    divs_in= descriptionxml.getElementsByTagName('div')
    description_out= ''
    title_out= ''
    for div in divs_in:
      tag= bdata(div)
      if tag=="Description:": description_out= tdata(div)
      if tag=="Title:": title_out= tdata(div)
    # Append and next
    triples.append( (s2xml(title_out),s2xml(description_out),s2url(imgurl_out)) )
    ix= ix+1
  return triples


def download():
  url= cfg.rssurl.replace(cfg.hostname,cfg.hostip) # Hack because DNS is not working
  session = requests.Session() 
  response = session.get(url, auth=requests_ntlm.HttpNtlmAuth(cfg.username,cfg.password), headers={'Host':cfg.hostname} ) # Hack because DNS is not working
  if response.status_code==200: 
    rssdata= response.content.strip(b'\xef\xbb\xbf').decode('utf-8')
    rsstriples= xml2triples(rssdata)
  else:
    rsstriples=[('Error','Failed to read '+rssout,'error')]
  return triples2xml(rsstriples)


def application(environ, start_response):
  xml= download()
  start_response( '200 OK', [('Content-type','text/plain')] )
  return [ xml.encode('utf-8') ]

  
if __name__ == "__main__":
  xml= download()
  print( xml )
  # [E2 80 9C] [E2 80 98] [E2 80 99] [E2 80 9D]    .replace(b'\xe2\x80\x99',b'\'')
  s=b'After years of R&amp;D we developed the world\xe2\x80\x99s first sensor'
  print( 'plain', s)
  print( 'decode()', s.decode() )
  print( 'decode(utf-8)', s.decode('utf-8') )

