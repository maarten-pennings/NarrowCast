#!/usr/bin/python3


# rndimg.png.py - Script picking a random image from a given directory
# 2021 nov 11  v1  Maarten Pennings  Created
version = "v1"


# You need some modules
#   sudo python3 -m pip install pillow requests

# To merge Python into Apache on Ubuntu:
#   sudo apt install apache2 libapache2-mod-wsgi-py3  # for python3

# Create a python script (e.g. rndimg.png.py) and assign rights
#   sudo chown maarten:www-data rndimg.png.py
#   sudo chmod 755 rndimg.png.py

# Map python script 'rndimg.png.py' to url 'rss/rndimg.png'
#   Edit configuration file
#     sudo vi /etc/apache2/sites-available/000-default.conf
#   and add the line in the section <VirtualHost *:80>
#     WSGIScriptAlias /rss/rndimg.png /var/www/html/rss/rndimg.png.py

# Then, enable mod-wsgi configuration and restart Apache service with the following command:
#   sudo a2enconf wsgi
#   sudo systemctl restart apache2

# To check errors in script look at the log
#   less /var/log/apache2/error.log


import os
import io
import urllib
import random
import requests


# Supported image types with the associated mimetype
mimetypes = {
  '.bmp':'image/bmp',
  '.gif':'image/gif',
  '.jpeg':'image/jpeg',
  '.jpg':'image/jpeg',
  '.ico':'image/x-icon',
  '.png':'image/png',
  '.webp':'image/webp'
}


# Error image
# created with 
#    with open('empty.png', "rb") as file : print( file.read() )
empty_png = b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x002\x00\x00\x00F\x08\x06\x00\x00\x00\x8e\x8c\xc7f\x00\x00\x00\x01sRGB\x00\xae\xce\x1c\xe9\x00\x00\x00\x04gAMA\x00\x00\xb1\x8f\x0b\xfca\x05\x00\x00\x00\tpHYs\x00\x00\x16%\x00\x00\x16%\x01IR$\xf0\x00\x00\x00\x12tEXtSoftware\x00Greenshot^U\x08\x05\x00\x00\x0c\x7fIDAThC\xddZk\x8c\x9ce\x15>\xb3;\xbb\xb3\xf7\x96K\xb7\x94-\xd8\x86\xee\x82\xd8V.\x8a\xa6\xadA,\x97\xb2@016\xfe0\x12!\x96Dc\xbb\x88\x11c\x88\x12o\x80\xd8t+"\xb4\xc6\xff\xa6\xbfL\x8c\x8b\x81r\xb3\xb6?\x89\xc6\x06l\xb7\xd0B\xb7\xb4^J\xeb^gfgg<\xcf9\xe7}\xbf\xf7\xfbvf\xf7\x1b\xba\xd8\xc6g\xf7\xfd\xce\xe5\xbd\x9d\xe7{\xaf3\xbb\x99\n\x83\xfe\x0f\xa0D*\xd3T.\x8e\x9a\x8b\x911\x19\xc3l\xa7\xf7\xccV\xaa#\x13\xcf\xafi\xa1\\C\x07\xcb\x06s\xcc\x0f!R\xc9\xbfK\xf9\x91\xdfR\xfe\xccQi/\x83\x86\x9cd\xc5\xdb\xeaT\x89\x1c\xeeH\xfb\xb22\r&\xa5\x84\xe9(o\xbejz\x86\xb8\x01i\x03\x0f\xf5\x95y\x8e4v\xddD\xb4x#2RA\xc3\xe0v[\x17]A\xedK\xd7\xb0\'K<D$\xbf\x98txHBI\x07gpI\xef\xb72ZI~\xd4\x01\x84\xd2\xe9\x0el\x8b+\xf27\xf0\x0b)\x17N\x98\x95\x0eBDP.Ps\xebbZ\xb4\xec\x93\xd4\xd8\xd4a\xcdj@\x1a\x14Lt\xea:\x84\xd4$\xb3ST\xe4#O!jX\x1e\xaa:%\xf9vC\xe9\xcb\xd7\x07OD\x1a-O\xf3\x80d\xa9\xf3\xb2\xeb\xa9\xb9\xad\xdb\xda\xc7T\x00\x82\x8e\xabv\xe6r\xf9)\n\x1eV\xa7VpR\xd4\xf2D\xe0\x01\xa7\xf9\xea@4"\x0c\xd7(\xa6Z\xfb\xa5\xd7P\xcbE\xab\x94\x86\xb5\xaf\x08\x02\x8e%\x08\xce\x13\xb3B\xad\xf7\xf7\xd0\xd6\xb7\x9e\xa4\xe3}Oh\xae\x7fp\xd2Bp\xc4\xfd\xe7\x80\x18\x918\xca\xd4\xd2\xb9\x8c\xda\xba\xaf\xe7\x05\x9de\x9b;\xf2\xfd\x19\x19o\x07\x00\x19\x16\x834@\x07\xfb3\xd4\xbb~\'\xdd2\xf4\x00\xed\xed\xfd\x89\xe6;\x04\r\x08/ \xf0\xd5\x0b#R\xabb\x85\x9arm\xd4\xb1\xecS\x94i\xea\x14[\x92\x15G\xc8\x1a\xb6\xab\xef2*\xb4m\xff0\xed\x1f\x1e\xa4\xe1\xcd{h\xf5@/\xf5g\x1e\xa4\xe6\xa76\xd03\x95\x1f\xd3\xb1\xab~de]= i\xd7\x07%2O\xfd\x06.\xd5\xb1\xf4\x06\xca\xb6-\xb3\xa2\xfc\x0c\xeb@\x8f\xbfV\x9az\xe39*\x94N\xd0\x15wl\xa0]\x95!\xe2_\x1a\xa2~\xda\xd3\xbb^F\xe9\xe6\xdf\xdfG/\xae\xfc\xa1\x96\xb7Q\x14\x88\x82\x87\xf7\xa4\xc2\x1cS+\x8e\x0c\x95\xa8\xed\x92\xab)\xb7\xb8\x8f*XD\x16\x80\xebXBI\x90Q\xb3B\x85C\xafRq\xd5\xc5\xd4\xbb\xabB\x9b\x876\x13\x1d\x18\xe0_\x1d\xa5\xec\x13\x9f\xa6\x17V>f\x85]\xaa\x1f\xa9\x89\x08\xf8\x06\x90k_BmKn\xe4\x9aM.\\y\x02q\x1bR\xdf\xf4\xcbW?I\xdf<\xf2\xb8\x8c\xc4@\xff\x1e\x1a\\G4\xcc\x8f\xe1\xc1\x834x\xb0_\x08\xbd\xb0\xe2\x07\xbef\xa4\xa4G}D\xd0Ce\x86\xb2\xbcE\xb7w\x7f\x827\x01#\x13\x8c\x8c\xa2B\'\xae\xddN\xdb\x8e=E\xad;n\x91@\xf9AC\xab\x07x\x8a\xad\x96\xf5\xb3\xe2\xee[h\xc5=\x9f\x13\x1d\x84\xa4\x8c\xab.\xca\x8c\xaa)\xa1w\xad\xfc;T\xf9\xcf\xcb09\xb8f\xcd\xa9\n\x04\x8cN\xca\x9c2\x94\x1f=I\xd3\x93#\xb2E\x87\xd7\x11\xfc\xb4m\xf9\x88L!\xbc\xfd\xbb6\xaf\xa3U\xdb\x1e\xa5\xe2\xe1\xd7d\xc1iy~\x87V\x16\xc8\xf2\x06P:\xfa\x98\xd6\xe7\xbcJ\xeerjXz\xbf\xe4\xa5A\x1d#\xe2H \x01e\xee\xb0\xd1|\xe6\xb5,L(}\xfb[\xe4\x8d/\xbfc\x9d\xac\x13\x97\xabOH\x97t\xaa\x9d\x0b\xea#\xe2%\'& \x1e3\x15\xea\x07\xfay\x8f\xca\xaf\xe8\xa0\xfc\x9b\xcf\x89-~Ij6\xffl\x83\xd7\x81\x95\xf7\xde\xcaO8\xd0n\x90\x91\x12)\x89\xb8\x00\xc2\x0e\xe0\xd3N\xa5cG\x0c\x80\xb2\xbb?^\x9c!\xa6\x10\xe5\xc4\xf9\xb1lg\xc4\x9c\xe9\x91r\x8d\xf0\x9ap\x01 AG\xb5\xf1\x7fSq\xfc\x1d\x9d\xf3<\xf7\x1f>\xf1\x0b\x14\x16\xec\xe6\xc5\xbde\xa8zT\x07\x0f\x1f\x91\xed\xb7x\xe4{\xfc&umq\x03"e\xcd@o\xe9\xa9k\x8d\xa4 b\x81\x87$\x8cX~\xfc4\x15\xc7\x8e\xc9\x02E\x10\xdf\xbe\xee\x97t\x10U\x18\x078\xd5\x9a\xf5\xab9\xed\xe2\xf53\xddwi\x9c\x08C\xdb\x02\x91\xe5\x0bM\xc4!A\x88Sa\x0c#\x12\x11\xe9X\xb3\x89\xe8\xc8a\x14\xa6L//v\xbe\xa2T\xc5\xaa>\x9a~\xeb\xcfROF\x00\t\xd7\x07X\xf0}\xe8\xbb\x96\x97\x9c\x98\x94x\xcc\x04&\xfe\xf6G\x9a\xcc\x1f\xa5\xc9\xc21\xe2\x17N\xf9i\xfe\xe49}\x9c\xf2\xa5\x11\xb9\xae\x14g\xde\xa3b\xe5\x14M\x1f\xd9\xa7\x95\xac\x9e\xc25dk\xaeN\xa4\x1c\x11t\x1au\xa4v\x99\xf2c<\xb5lD\xdc\xa84@J;x6\xd0\x08\x1f\x8c\xc3\xecq\xd8x\xf8\xbb\x9c\xa7e\xf1\x1e]y\xb19\xe1GF\'W\xdf\x1aI9"I\x12H\xce\x0f\xe1\xa4\xf3\xa8\xb2\xed\x9d\xedr-\xc1\xa9\xedRn\xfb\xcd\xb4w\xd5\xe3RJ\xcb\xa1\x86\xd6\xf2H\x98i\x90\x82\x08:3\x15\x10\x1d\x0fs\x1a\t\x0c\xac\xf3\xe39\xf0\xee\x0e\xd9\xb9p0\xe2\n\xe2\x92\xbb[\xed\xbd\xea\xa7\xa8\x16G\xd0F\xbdH1\xb5\xaao\xbd\xf0\xeb\xae\xc5\xdbo0-\xdc\xb4\xe9X\xb3SN\xeb\x9e\xdb\xf8\xb3\x0c\xf2dW\xcaP\xee\x9a-\xf4\xfc\x83|\xf3\xdd\xbd\x85\xb7\xdfK1\x914\x0fm\xa0\xbe\xb4\x85\xa9\xc5\xbb\xd6e\x0b6\xb5\x10\xb4\xa9\x80\xe8x8\xa7\xbe}u\xdb"uY\x8c\x9e[o2\r\xd0\x92\xc5C\xbf\xa6\x8d\x0f?\xc2\xfan\xf3\x01A\xa5\x0f\x88\xf9\x89$\x13\x84\xb7\x01#`P2\x91\xed\xb3\xbc+\xc8\x8f\x0b\x03\xac\xb8\'\r\xe6 \xc2\x8d\xf9\xf6\x9c\x8e\x87wr<\x81.\x0f\xb3Y\xe0\x0e\xb8;\xb7C\r\xffT\xbc\xc4\x9fO\xe4\xb0\xf4NV\xa4nX\xaa>\xcc\xb1Fj\xaf\rgO\xf1\x81X\x18?.\xeb\xc2f\xb8\xcd\xf1\x0c\xed[\xbb\x95\x17\xf5}|M\xd9O\x9f\xbf\x933\r|;\xa1\x81\xde\x07ih\xf8Z>\x18\xb7\x99Wq\xfb\xd1\xef\xfb\xfa\x94\xbb\x82\xd7\xc8\x03\x963?j\x10qA[\xe0\x10U\x88\t\x91\xb1w\xb9\x0e_4\xc0\x84\xeb\xcb\xb9\xc0\xa9\xf3\xe3\x05\xb6\xb1\x0e\x00>\x1d=p\x89\xc1\x05&\xf4)Jo/U"x--\x0bBd\xfe\xd1\x80\xf4Dx\x97\x91\xdd\x8a!:\xcbS\xaf\xbe.v=X\xc9\x9f\x18\xb5\x1d\x9e\xf1\xe7N\xa4\xc9\x07\x1a#\xe4}N/3\x91\xd3J\x04\xa1\xdb\xa88"~\xcb\x85\x0fyR\x06g\xbd\x14\xd2\xc4\x96\x8c \x7f>\x83\x8e2\x0bG$c_\xc6\x85A[\xe0\xde\xb6\xbcI\x8c\xc8(\xaf\x11\tZ\x83\x10)\xedh\xb0\'q\x9ep\xe9j\xc0uE\x88 xy\x01\xfc\xb30D\xd07\x8fH2h/\xe1\x074\x7fr\x14S\x0bD8\x08\xf4\xcf\x12\xdf\xa4\xb3"D\xeexe+\x1d\xd8\xf3\x07^\x12o\xa0\xd2,\x14\x0e]$\xe5\x84\xb4\x8c\x1a\x9a\xc0F\xca\xa9\x89\x89\xf4| "/\xc1\xe4F\x83\x11\x01\x01!1{4\xa0\xcb\x88\x84D\xb8~C#\x02!\xea\xfa\xd5]\xb4\x8e?\x05>\xcak\xba\xf7\xda\xea\x9fL\xae\xbc\xf33\xe8QG\x01\xa3)\xfd\xb3\x8e)\xd9t\xe5\xb9\x10a\x87#\xe2\x82\xf62>\x1a\x11\x91\x11\xe9\x1c?`\xe3v\xb0\xae\xeb\x9e\x91\xcf#\x13So\xf3\xcb\xe6\xc0\xac\x8cL?\x94u#g>\x04\xefGG\x88\xf0\x15\xa5\xe7k\xd2c\x1a\xe8\xebC`\x92\x12p$|\x9eIo\xaa\x12\x96p>`b\xf2-\x91\x91\x8b\x15\xf9UY\r5\xdc\xf3\xc2\x880\xa4\x05<\xd0\x89%\x07\xaf[\xbeO\xfa\xc4\xbb\x15M\\\x1c&KL\xa6?\xad\xe5\xcf\xf0R\x17y\x92\x19 \xb0cYf4$\xcb\xcf\r\x9bZ\xc7\xa8rv/[\x18Z\x9eZ\x98F.\x00\x1fD\xa8G\x8b=?vB\xa7\x0eC6W\xa8\xdcNWG\x1f\x7f\xdc}\x83\x06\x87wQ\xdf*\xc9\x9e\x85\x8d\x87\x1f\x91\xa9\xa5\xfdFu\xa1\x97\xf9<\xcb^\xfe\r\xa2\xecEZx\x1e$\x88\xe0\x17D\xc2\xc0mMx\x12\x91\xee\x88\xb8m\x17\x03\xac\x9c\xd8fe\xd3\xd7_\xa7\x038\xc4\xe5\xeb\x86\xd9(\x1cZ\x1c\x10A\x1d\xd31QX\x96\x99D\xf6\xb2\xaf0\x99\x8b\xadFm\x18\x91\xa3J\x04\xcd\xfao\x0f\xa3\x80\xe3z\xb4\xd8\'d\xfb}/\n\x02!\xb0\x8e \x16=ww\x8a]k\x03hp\xf9`\xa1\xe3\xa5\x18\x11i\x0f\x7f\x97\xe9f2MKP\xb2&\x12DP\x15\xbbV\x14\xac\xc8\x18\x11H\xcd\x17"\xa3\'uDd$\\@D\x8bnxVv\xadq^\xf0\x8e\x9c\xeeh\x08\xd4\x02v:\xa4\x91I\x12A\xdb\xe5\xcc"j\\\xce\xd3L\xce\xb8\xea\x90\xee\x15\x082\x94!\x02\x125\xf2%;\x81\xf1I\xbe\xea\x86H\x96\xa9\xd6\x14#\xe9n\xa8\x8c\xb1\xb3hVu\x04D\x18a\xb01\x9d\x85 \xf0\x9b\x94\xad4\x06\xe4\xe9\xddv\xdf\xda\xa7\xd5\xe5\xe1\xca&\xeb\x98\xc7\xbbg\xe7\xcf\x87hj\x9dy\x01&\x8f(np\xdc\x90\'\xc2\xd3(\x11\xbc\xca2M\xf0\xa5\x11\x7fZ\x88\xa6\x0e\xeacjdh\xff\r\xf7\xf0\xe7\x91\xdf\xcd\xbdk\x1d\xfa\x8e\x94G]\xbc\xd3\xe8\xde\x85v\xf0\x8e\xb5=\xb1\x97?\xccy\xedR\xaf\x1a\x8c\xc8\xdbL\xe4Eu\xd4\\\xec\xb3\tM\xf0\xc9>5zJ\x02\x10\x02F\x04\x01,\xbe\x11\x7f\xa8\xc1\xe7\x11,\xf4\x1a\xbb\xd6\xdf\x17\xf9@Q\xa7\x01\xc1{"\xea\x13B\xb0S\x11\xe1kD\xe5,F\x04U\xe5N\xcdH,\xf8\x98\xd4\xbc\xf1Q\x1e\x911G\x84]\xbc\x98\xe5\xadr+\xff\xda\xf7W\x96s\xe3\xcaM\xeb\xb5\x9e\xbd}\x1d\x11\x0b\\\x16<\xd4s"\x92\x08\xbe\xda\xf4\xe24.\xe7\xc8?""\xdc\xa9\xde~\x11\x8f\x06\xa7\xa3\xc4;\x92:5X)\x1f\xa58\x11\xb59\xc7\xca\xa5#\x82\x16\x0c\x08\xce!\nV\x92\xcb\x12\xe9|\x81_lS\r\xce\xfcM\xdb\xd3\xf4\xad\x91\x9d\xf4\x10\'\xe7\x1c\xf9\xe8vU\x80D\xbdYvJDD\xd0\x80\x7f\xdb\x91\xb0\x8c 9\xf0\xfe>S2}6\xfe\xc9\xb7\xdf\xaeg\xef\xa2\x81\xde\xf5\xf2\x1f\x10\xf8\xd6\xd1\xd5\x7fj\xfdN\xdaz\xf4\xe7\xa2/\x14\x8cH\x18\xa4\xd3-\x85n\xef\xab\xd0Ly\x86\n\x13\xa7\xe1\x14\xb8bN\xc3w\xbe\xf8z\x14\x7f\xc5\xc5\x7f@\x84\xd8\xb5\xbf\xcf\x88-\x1c\x12S\xcb\xc2\x11\xe1\xec0E\x98\x1a{\x9f\xf9\xe8\xa2\x8f\xe7\x18\x0e\x0c\xc8\x1fB\xc7{\x9a\xf93\x89^\xe7\x1d\xf2o\xea-b!\x11\x10q\x08\x82v\x11\x06\x0b\xdc\xe93%|\xdd\x03\xb3\xf6\x9b\x1d\xfb\xcb\x0e\xdf\xc4\x87\x8d\x04\x11\x04j2\x96\x0ca\x1e\x13R\n\x96/F4:8=6\xbd\xf6\x90\x1a\tl;\x16,\xf6\x94\xc0\xe6:\x17\x12S+\x90"\xf8\x11\x8e\x86\xcb\x9b\x03\x19+"\xebb\xa0\x97\xba\x9e\xe9\xe7]K\xffH\xfa\xd0\xf1Aj\xddy\x9b\xac\x0f\xfc\r>\xc2\xfc\xedNOOS\xa9T\xa2r\xb9\\\x95T\xb0\xd8! \xc3\x94D\x94W-7\xc4\xe8\xd8a!\x83\x05\x8f]\x0b#\x04\xa9\x1b\xc0\x16*\xac\xc4\xbfM\xa5G\xb1X\xa4B\xa1 \t\xba#\xe5`\x07\xe2\x11\xaa\xbc\xff<L=\x80\x84Pp\x08"\xc5\xf42\x9d=}\x8a\xa6\xa7\xce\xf2\xab\xe0\x83L\x0e=M\xd1\x81\x87k9\x17g)\xf9\x98{\xc8w\'\xb7K\xf0\xe3\x10\xe4w\xea\xea\xe2\xe0t\xe5\xdd\x81x\xa6\xf5\xab\x94\xc9vPSS\x1357\xf3\xa7\xc7lV\xdb2xm\xd6\xb7\'\x1e\xce\x0e\x13\x977\x99Du\xef\xb9\xa1\x9c\xed\xa6\xe6\x96.\xea\xec\xec\xa4\xf6\xf6v!\x12\x92\x00tD\xcaSD\x18\x91\xe2I\x8e\xc4\x82\xad:\x1a\xc1(-\xf9\x02UZV\xb0>\x1f\xf0\xb6\xd3\xa3zi\x1b\xa99\xa0\xb4\x1aZ\x89.\xb9\x97\xa8\xedcb*\\\xf0a2\x08\x19\x0c{c\x8a\x84)\x96>\xc9\xbdkV\x9a\xffep)\x03wJ\x8b?\xcb\xe9f\x18\xea\x03$~#\xe2G\x06p\xf2\xc2@D\xc4\xa1}\x8dL\x1bjlI\x04n\xa8\xe6\xbb\x000\x9b\x08\xd0\xbc\x8c\xa8\xfb\xcbD9\x96\x124\xa7$\x81\x0b\x8cKu"@#\xdf\xfd\xbb\xbf\xa8#\xe4\xf6kO\x86\xf7\x07\xbe4\xd6:\x9c\xce\x07j\x13\x11\xf0\xba\xb9\xf86\xde\x08n\xd75\xe4\xc0\xb1\xe3\xa4u\x87\x13\xf4\x99\x99\x99\xf3Jj\x1e"\x00/\xfc\x8e\xeb\x88\x96~\x89\xd5\x0e\xb6uD\x10<H\xb84\xd7\xf5\xe1\x7f\x81\x14D\x0c\xcd\x97\x13\xf5\xdcG\x94\xed\x11\xb3T\xd2Qhll\xa4\x96\x96\x16\xca\xe5r\xa2\xcbG\xd7\xf3\x00=\x10\xebA\x85?\x15\x9ey\x85Jmk\xa91\xd7}\xde\x02O\xa2~"\x17(\xd2O\xad\x0b\x1aD\xff\x05Me\xf5\xeb\x86\xc2\xda\xa3\x00\x00\x00\x00IEND\xaeB`\x82'


# Prepends the path of this script to dir, and make it an absolute path. 
# Checks that we do not wander off to high.
def abspath(dir):
  global log
  root = os.path.dirname(os.path.realpath(__file__))
  path = os.path.join(root, dir)
  log+= f"abspath: {root} + {dir} = {path}\r\n"
  if not path.startswith( root ) : # "/var/www/html"
    raise Exception( f"Illegal path {path}" )
  return path


# Pick a random image from directory `imgsdir`
# Returns the final image buffer and the extension.
def main(imgsdir) :
  global log
  log = ""
  log += f"Random image picker - {version}\r\n"
  log += "SYNTAX : rndimg.png?imgdir=.\r\n"
  # Get absolute path to dir with images
  path = abspath(imgsdir)
  # Get a list of images (and others for error reporting)
  images = []
  other = []
  for filename in os.listdir(path) :
    fullname = os.path.join(path,filename)
    extension = os.path.splitext(fullname)[1]
    if os.path.isfile(fullname) and extension in mimetypes : 
      images.append(filename)
    else :
      other.append(filename)
  log+= f"images : {images}\r\n"
  log+= f"other  : {other}\r\n"
  if len(images) == 0 :
    return empty_png, '.png'
  # Open a random image
  index = random.randrange(len(images))
  fullname = os.path.join(path,images[index])
  extension = os.path.splitext(fullname)[1]
  log+= f"random : {fullname}\r\n"
  with open(fullname, "rb") as file :
    image = file.read()
  return image, extension


# The entry point for the webserver
def application(environ, start_response):
  global log
  try:
    # Get parameters from URL
    params = urllib.parse.parse_qs(environ['QUERY_STRING'])
    imgsdir = params.get('imgsdir', ["."])[0]  # default current dir
    # Get random image from imgsdir
    image,extension = main(imgsdir)
    # raise Exception("Aborted for testing") # Uncomment for testing
    start_response("200 OK",[("Content-type",mimetypes[extension])])
    return [image]
  except Exception as x:
    log+= f"\r\nERROR  : {x}\r\n"
    start_response("404 ERROR",[("Content-type","text/plain")])
    return [ log.encode("utf-8") ]


# The entry point for command line test
if __name__ == "__main__":
  global log
  try:
    imgsdir = "imgs"
    image,extension = main(imgsdir)
    filename = f"selected{extension}"
    with open(filename, "wb") as file :
      file.write(image)
    log+= f"image : saved '{filename}'\r\n"
    print(log)
  except Exception as x:
    log+= f"\r\nERROR  : {x}\r\n"
    print(log)

